/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Executive } from "./Executive";
import { ExecutiveCountArgs } from "./ExecutiveCountArgs";
import { ExecutiveFindManyArgs } from "./ExecutiveFindManyArgs";
import { ExecutiveFindUniqueArgs } from "./ExecutiveFindUniqueArgs";
import { CreateExecutiveArgs } from "./CreateExecutiveArgs";
import { UpdateExecutiveArgs } from "./UpdateExecutiveArgs";
import { DeleteExecutiveArgs } from "./DeleteExecutiveArgs";
import { ExecutiveService } from "../executive.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Executive)
export class ExecutiveResolverBase {
  constructor(
    protected readonly service: ExecutiveService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Executive",
    action: "read",
    possession: "any",
  })
  async _executivesMeta(
    @graphql.Args() args: ExecutiveCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Executive])
  @nestAccessControl.UseRoles({
    resource: "Executive",
    action: "read",
    possession: "any",
  })
  async executives(
    @graphql.Args() args: ExecutiveFindManyArgs
  ): Promise<Executive[]> {
    return this.service.executives(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Executive, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Executive",
    action: "read",
    possession: "own",
  })
  async executive(
    @graphql.Args() args: ExecutiveFindUniqueArgs
  ): Promise<Executive | null> {
    const result = await this.service.executive(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Executive)
  @nestAccessControl.UseRoles({
    resource: "Executive",
    action: "create",
    possession: "any",
  })
  async createExecutive(
    @graphql.Args() args: CreateExecutiveArgs
  ): Promise<Executive> {
    return await this.service.createExecutive({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Executive)
  @nestAccessControl.UseRoles({
    resource: "Executive",
    action: "update",
    possession: "any",
  })
  async updateExecutive(
    @graphql.Args() args: UpdateExecutiveArgs
  ): Promise<Executive | null> {
    try {
      return await this.service.updateExecutive({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Executive)
  @nestAccessControl.UseRoles({
    resource: "Executive",
    action: "delete",
    possession: "any",
  })
  async deleteExecutive(
    @graphql.Args() args: DeleteExecutiveArgs
  ): Promise<Executive | null> {
    try {
      return await this.service.deleteExecutive(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Judiciary as PrismaJudiciary } from "@prisma/client";

export class JudiciaryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.JudiciaryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.judiciary.count(args);
  }

  async judiciaries(
    args: Prisma.JudiciaryFindManyArgs
  ): Promise<PrismaJudiciary[]> {
    return this.prisma.judiciary.findMany(args);
  }
  async judiciary(
    args: Prisma.JudiciaryFindUniqueArgs
  ): Promise<PrismaJudiciary | null> {
    return this.prisma.judiciary.findUnique(args);
  }
  async createJudiciary(
    args: Prisma.JudiciaryCreateArgs
  ): Promise<PrismaJudiciary> {
    return this.prisma.judiciary.create(args);
  }
  async updateJudiciary(
    args: Prisma.JudiciaryUpdateArgs
  ): Promise<PrismaJudiciary> {
    return this.prisma.judiciary.update(args);
  }
  async deleteJudiciary(
    args: Prisma.JudiciaryDeleteArgs
  ): Promise<PrismaJudiciary> {
    return this.prisma.judiciary.delete(args);
  }
}

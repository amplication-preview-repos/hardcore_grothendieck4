/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Judiciary } from "./Judiciary";
import { JudiciaryCountArgs } from "./JudiciaryCountArgs";
import { JudiciaryFindManyArgs } from "./JudiciaryFindManyArgs";
import { JudiciaryFindUniqueArgs } from "./JudiciaryFindUniqueArgs";
import { CreateJudiciaryArgs } from "./CreateJudiciaryArgs";
import { UpdateJudiciaryArgs } from "./UpdateJudiciaryArgs";
import { DeleteJudiciaryArgs } from "./DeleteJudiciaryArgs";
import { JudiciaryService } from "../judiciary.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Judiciary)
export class JudiciaryResolverBase {
  constructor(
    protected readonly service: JudiciaryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Judiciary",
    action: "read",
    possession: "any",
  })
  async _judiciariesMeta(
    @graphql.Args() args: JudiciaryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Judiciary])
  @nestAccessControl.UseRoles({
    resource: "Judiciary",
    action: "read",
    possession: "any",
  })
  async judiciaries(
    @graphql.Args() args: JudiciaryFindManyArgs
  ): Promise<Judiciary[]> {
    return this.service.judiciaries(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Judiciary, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Judiciary",
    action: "read",
    possession: "own",
  })
  async judiciary(
    @graphql.Args() args: JudiciaryFindUniqueArgs
  ): Promise<Judiciary | null> {
    const result = await this.service.judiciary(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Judiciary)
  @nestAccessControl.UseRoles({
    resource: "Judiciary",
    action: "create",
    possession: "any",
  })
  async createJudiciary(
    @graphql.Args() args: CreateJudiciaryArgs
  ): Promise<Judiciary> {
    return await this.service.createJudiciary({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Judiciary)
  @nestAccessControl.UseRoles({
    resource: "Judiciary",
    action: "update",
    possession: "any",
  })
  async updateJudiciary(
    @graphql.Args() args: UpdateJudiciaryArgs
  ): Promise<Judiciary | null> {
    try {
      return await this.service.updateJudiciary({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Judiciary)
  @nestAccessControl.UseRoles({
    resource: "Judiciary",
    action: "delete",
    possession: "any",
  })
  async deleteJudiciary(
    @graphql.Args() args: DeleteJudiciaryArgs
  ): Promise<Judiciary | null> {
    try {
      return await this.service.deleteJudiciary(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Legislature } from "./Legislature";
import { LegislatureCountArgs } from "./LegislatureCountArgs";
import { LegislatureFindManyArgs } from "./LegislatureFindManyArgs";
import { LegislatureFindUniqueArgs } from "./LegislatureFindUniqueArgs";
import { CreateLegislatureArgs } from "./CreateLegislatureArgs";
import { UpdateLegislatureArgs } from "./UpdateLegislatureArgs";
import { DeleteLegislatureArgs } from "./DeleteLegislatureArgs";
import { LegislatureService } from "../legislature.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Legislature)
export class LegislatureResolverBase {
  constructor(
    protected readonly service: LegislatureService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Legislature",
    action: "read",
    possession: "any",
  })
  async _legislaturesMeta(
    @graphql.Args() args: LegislatureCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Legislature])
  @nestAccessControl.UseRoles({
    resource: "Legislature",
    action: "read",
    possession: "any",
  })
  async legislatures(
    @graphql.Args() args: LegislatureFindManyArgs
  ): Promise<Legislature[]> {
    return this.service.legislatures(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Legislature, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Legislature",
    action: "read",
    possession: "own",
  })
  async legislature(
    @graphql.Args() args: LegislatureFindUniqueArgs
  ): Promise<Legislature | null> {
    const result = await this.service.legislature(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Legislature)
  @nestAccessControl.UseRoles({
    resource: "Legislature",
    action: "create",
    possession: "any",
  })
  async createLegislature(
    @graphql.Args() args: CreateLegislatureArgs
  ): Promise<Legislature> {
    return await this.service.createLegislature({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Legislature)
  @nestAccessControl.UseRoles({
    resource: "Legislature",
    action: "update",
    possession: "any",
  })
  async updateLegislature(
    @graphql.Args() args: UpdateLegislatureArgs
  ): Promise<Legislature | null> {
    try {
      return await this.service.updateLegislature({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Legislature)
  @nestAccessControl.UseRoles({
    resource: "Legislature",
    action: "delete",
    possession: "any",
  })
  async deleteLegislature(
    @graphql.Args() args: DeleteLegislatureArgs
  ): Promise<Legislature | null> {
    try {
      return await this.service.deleteLegislature(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

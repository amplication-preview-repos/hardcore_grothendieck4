/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ExerciseCount as PrismaExerciseCount,
  ExerciseSession as PrismaExerciseSession,
} from "@prisma/client";

export class ExerciseCountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExerciseCountCountArgs, "select">
  ): Promise<number> {
    return this.prisma.exerciseCount.count(args);
  }

  async exerciseCounts(
    args: Prisma.ExerciseCountFindManyArgs
  ): Promise<PrismaExerciseCount[]> {
    return this.prisma.exerciseCount.findMany(args);
  }
  async exerciseCount(
    args: Prisma.ExerciseCountFindUniqueArgs
  ): Promise<PrismaExerciseCount | null> {
    return this.prisma.exerciseCount.findUnique(args);
  }
  async createExerciseCount(
    args: Prisma.ExerciseCountCreateArgs
  ): Promise<PrismaExerciseCount> {
    return this.prisma.exerciseCount.create(args);
  }
  async updateExerciseCount(
    args: Prisma.ExerciseCountUpdateArgs
  ): Promise<PrismaExerciseCount> {
    return this.prisma.exerciseCount.update(args);
  }
  async deleteExerciseCount(
    args: Prisma.ExerciseCountDeleteArgs
  ): Promise<PrismaExerciseCount> {
    return this.prisma.exerciseCount.delete(args);
  }

  async getExerciseSession(
    parentId: string
  ): Promise<PrismaExerciseSession | null> {
    return this.prisma.exerciseCount
      .findUnique({
        where: { id: parentId },
      })
      .exerciseSession();
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ExerciseCount } from "./ExerciseCount";
import { ExerciseCountCountArgs } from "./ExerciseCountCountArgs";
import { ExerciseCountFindManyArgs } from "./ExerciseCountFindManyArgs";
import { ExerciseCountFindUniqueArgs } from "./ExerciseCountFindUniqueArgs";
import { CreateExerciseCountArgs } from "./CreateExerciseCountArgs";
import { UpdateExerciseCountArgs } from "./UpdateExerciseCountArgs";
import { DeleteExerciseCountArgs } from "./DeleteExerciseCountArgs";
import { ExerciseSession } from "../../exerciseSession/base/ExerciseSession";
import { ExerciseCountService } from "../exerciseCount.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ExerciseCount)
export class ExerciseCountResolverBase {
  constructor(
    protected readonly service: ExerciseCountService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ExerciseCount",
    action: "read",
    possession: "any",
  })
  async _exerciseCountsMeta(
    @graphql.Args() args: ExerciseCountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ExerciseCount])
  @nestAccessControl.UseRoles({
    resource: "ExerciseCount",
    action: "read",
    possession: "any",
  })
  async exerciseCounts(
    @graphql.Args() args: ExerciseCountFindManyArgs
  ): Promise<ExerciseCount[]> {
    return this.service.exerciseCounts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ExerciseCount, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ExerciseCount",
    action: "read",
    possession: "own",
  })
  async exerciseCount(
    @graphql.Args() args: ExerciseCountFindUniqueArgs
  ): Promise<ExerciseCount | null> {
    const result = await this.service.exerciseCount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExerciseCount)
  @nestAccessControl.UseRoles({
    resource: "ExerciseCount",
    action: "create",
    possession: "any",
  })
  async createExerciseCount(
    @graphql.Args() args: CreateExerciseCountArgs
  ): Promise<ExerciseCount> {
    return await this.service.createExerciseCount({
      ...args,
      data: {
        ...args.data,

        exerciseSession: args.data.exerciseSession
          ? {
              connect: args.data.exerciseSession,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExerciseCount)
  @nestAccessControl.UseRoles({
    resource: "ExerciseCount",
    action: "update",
    possession: "any",
  })
  async updateExerciseCount(
    @graphql.Args() args: UpdateExerciseCountArgs
  ): Promise<ExerciseCount | null> {
    try {
      return await this.service.updateExerciseCount({
        ...args,
        data: {
          ...args.data,

          exerciseSession: args.data.exerciseSession
            ? {
                connect: args.data.exerciseSession,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExerciseCount)
  @nestAccessControl.UseRoles({
    resource: "ExerciseCount",
    action: "delete",
    possession: "any",
  })
  async deleteExerciseCount(
    @graphql.Args() args: DeleteExerciseCountArgs
  ): Promise<ExerciseCount | null> {
    try {
      return await this.service.deleteExerciseCount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ExerciseSession, {
    nullable: true,
    name: "exerciseSession",
  })
  @nestAccessControl.UseRoles({
    resource: "ExerciseSession",
    action: "read",
    possession: "any",
  })
  async getExerciseSession(
    @graphql.Parent() parent: ExerciseCount
  ): Promise<ExerciseSession | null> {
    const result = await this.service.getExerciseSession(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

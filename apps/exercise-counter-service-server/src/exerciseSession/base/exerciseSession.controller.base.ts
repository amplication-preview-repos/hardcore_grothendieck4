/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ExerciseSessionService } from "../exerciseSession.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ExerciseSessionCreateInput } from "./ExerciseSessionCreateInput";
import { ExerciseSession } from "./ExerciseSession";
import { ExerciseSessionFindManyArgs } from "./ExerciseSessionFindManyArgs";
import { ExerciseSessionWhereUniqueInput } from "./ExerciseSessionWhereUniqueInput";
import { ExerciseSessionUpdateInput } from "./ExerciseSessionUpdateInput";
import { ExerciseCountFindManyArgs } from "../../exerciseCount/base/ExerciseCountFindManyArgs";
import { ExerciseCount } from "../../exerciseCount/base/ExerciseCount";
import { ExerciseCountWhereUniqueInput } from "../../exerciseCount/base/ExerciseCountWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ExerciseSessionControllerBase {
  constructor(
    protected readonly service: ExerciseSessionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ExerciseSession })
  @nestAccessControl.UseRoles({
    resource: "ExerciseSession",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createExerciseSession(
    @common.Body() data: ExerciseSessionCreateInput
  ): Promise<ExerciseSession> {
    return await this.service.createExerciseSession({
      data: {
        ...data,

        exercise: data.exercise
          ? {
              connect: data.exercise,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        endTime: true,

        exercise: {
          select: {
            id: true,
          },
        },

        id: true,
        startTime: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ExerciseSession] })
  @ApiNestedQuery(ExerciseSessionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ExerciseSession",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async exerciseSessions(
    @common.Req() request: Request
  ): Promise<ExerciseSession[]> {
    const args = plainToClass(ExerciseSessionFindManyArgs, request.query);
    return this.service.exerciseSessions({
      ...args,
      select: {
        createdAt: true,
        endTime: true,

        exercise: {
          select: {
            id: true,
          },
        },

        id: true,
        startTime: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ExerciseSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ExerciseSession",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async exerciseSession(
    @common.Param() params: ExerciseSessionWhereUniqueInput
  ): Promise<ExerciseSession | null> {
    const result = await this.service.exerciseSession({
      where: params,
      select: {
        createdAt: true,
        endTime: true,

        exercise: {
          select: {
            id: true,
          },
        },

        id: true,
        startTime: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ExerciseSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ExerciseSession",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateExerciseSession(
    @common.Param() params: ExerciseSessionWhereUniqueInput,
    @common.Body() data: ExerciseSessionUpdateInput
  ): Promise<ExerciseSession | null> {
    try {
      return await this.service.updateExerciseSession({
        where: params,
        data: {
          ...data,

          exercise: data.exercise
            ? {
                connect: data.exercise,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          endTime: true,

          exercise: {
            select: {
              id: true,
            },
          },

          id: true,
          startTime: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ExerciseSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ExerciseSession",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteExerciseSession(
    @common.Param() params: ExerciseSessionWhereUniqueInput
  ): Promise<ExerciseSession | null> {
    try {
      return await this.service.deleteExerciseSession({
        where: params,
        select: {
          createdAt: true,
          endTime: true,

          exercise: {
            select: {
              id: true,
            },
          },

          id: true,
          startTime: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/exerciseCounts")
  @ApiNestedQuery(ExerciseCountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ExerciseCount",
    action: "read",
    possession: "any",
  })
  async findExerciseCounts(
    @common.Req() request: Request,
    @common.Param() params: ExerciseSessionWhereUniqueInput
  ): Promise<ExerciseCount[]> {
    const query = plainToClass(ExerciseCountFindManyArgs, request.query);
    const results = await this.service.findExerciseCounts(params.id, {
      ...query,
      select: {
        count: true,
        createdAt: true,

        exerciseSession: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/exerciseCounts")
  @nestAccessControl.UseRoles({
    resource: "ExerciseSession",
    action: "update",
    possession: "any",
  })
  async connectExerciseCounts(
    @common.Param() params: ExerciseSessionWhereUniqueInput,
    @common.Body() body: ExerciseCountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      exerciseCounts: {
        connect: body,
      },
    };
    await this.service.updateExerciseSession({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/exerciseCounts")
  @nestAccessControl.UseRoles({
    resource: "ExerciseSession",
    action: "update",
    possession: "any",
  })
  async updateExerciseCounts(
    @common.Param() params: ExerciseSessionWhereUniqueInput,
    @common.Body() body: ExerciseCountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      exerciseCounts: {
        set: body,
      },
    };
    await this.service.updateExerciseSession({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/exerciseCounts")
  @nestAccessControl.UseRoles({
    resource: "ExerciseSession",
    action: "update",
    possession: "any",
  })
  async disconnectExerciseCounts(
    @common.Param() params: ExerciseSessionWhereUniqueInput,
    @common.Body() body: ExerciseCountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      exerciseCounts: {
        disconnect: body,
      },
    };
    await this.service.updateExerciseSession({
      where: params,
      data,
      select: { id: true },
    });
  }
}

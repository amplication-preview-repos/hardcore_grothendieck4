/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ExerciseSession } from "./ExerciseSession";
import { ExerciseSessionCountArgs } from "./ExerciseSessionCountArgs";
import { ExerciseSessionFindManyArgs } from "./ExerciseSessionFindManyArgs";
import { ExerciseSessionFindUniqueArgs } from "./ExerciseSessionFindUniqueArgs";
import { CreateExerciseSessionArgs } from "./CreateExerciseSessionArgs";
import { UpdateExerciseSessionArgs } from "./UpdateExerciseSessionArgs";
import { DeleteExerciseSessionArgs } from "./DeleteExerciseSessionArgs";
import { ExerciseCountFindManyArgs } from "../../exerciseCount/base/ExerciseCountFindManyArgs";
import { ExerciseCount } from "../../exerciseCount/base/ExerciseCount";
import { Exercise } from "../../exercise/base/Exercise";
import { User } from "../../user/base/User";
import { ExerciseSessionService } from "../exerciseSession.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ExerciseSession)
export class ExerciseSessionResolverBase {
  constructor(
    protected readonly service: ExerciseSessionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ExerciseSession",
    action: "read",
    possession: "any",
  })
  async _exerciseSessionsMeta(
    @graphql.Args() args: ExerciseSessionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ExerciseSession])
  @nestAccessControl.UseRoles({
    resource: "ExerciseSession",
    action: "read",
    possession: "any",
  })
  async exerciseSessions(
    @graphql.Args() args: ExerciseSessionFindManyArgs
  ): Promise<ExerciseSession[]> {
    return this.service.exerciseSessions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ExerciseSession, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ExerciseSession",
    action: "read",
    possession: "own",
  })
  async exerciseSession(
    @graphql.Args() args: ExerciseSessionFindUniqueArgs
  ): Promise<ExerciseSession | null> {
    const result = await this.service.exerciseSession(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExerciseSession)
  @nestAccessControl.UseRoles({
    resource: "ExerciseSession",
    action: "create",
    possession: "any",
  })
  async createExerciseSession(
    @graphql.Args() args: CreateExerciseSessionArgs
  ): Promise<ExerciseSession> {
    return await this.service.createExerciseSession({
      ...args,
      data: {
        ...args.data,

        exercise: args.data.exercise
          ? {
              connect: args.data.exercise,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExerciseSession)
  @nestAccessControl.UseRoles({
    resource: "ExerciseSession",
    action: "update",
    possession: "any",
  })
  async updateExerciseSession(
    @graphql.Args() args: UpdateExerciseSessionArgs
  ): Promise<ExerciseSession | null> {
    try {
      return await this.service.updateExerciseSession({
        ...args,
        data: {
          ...args.data,

          exercise: args.data.exercise
            ? {
                connect: args.data.exercise,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExerciseSession)
  @nestAccessControl.UseRoles({
    resource: "ExerciseSession",
    action: "delete",
    possession: "any",
  })
  async deleteExerciseSession(
    @graphql.Args() args: DeleteExerciseSessionArgs
  ): Promise<ExerciseSession | null> {
    try {
      return await this.service.deleteExerciseSession(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ExerciseCount], { name: "exerciseCounts" })
  @nestAccessControl.UseRoles({
    resource: "ExerciseCount",
    action: "read",
    possession: "any",
  })
  async findExerciseCounts(
    @graphql.Parent() parent: ExerciseSession,
    @graphql.Args() args: ExerciseCountFindManyArgs
  ): Promise<ExerciseCount[]> {
    const results = await this.service.findExerciseCounts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Exercise, {
    nullable: true,
    name: "exercise",
  })
  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "read",
    possession: "any",
  })
  async getExercise(
    @graphql.Parent() parent: ExerciseSession
  ): Promise<Exercise | null> {
    const result = await this.service.getExercise(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: ExerciseSession
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

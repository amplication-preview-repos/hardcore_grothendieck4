/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ExerciseSession as PrismaExerciseSession,
  ExerciseCount as PrismaExerciseCount,
  Exercise as PrismaExercise,
  User as PrismaUser,
} from "@prisma/client";

export class ExerciseSessionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExerciseSessionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.exerciseSession.count(args);
  }

  async exerciseSessions(
    args: Prisma.ExerciseSessionFindManyArgs
  ): Promise<PrismaExerciseSession[]> {
    return this.prisma.exerciseSession.findMany(args);
  }
  async exerciseSession(
    args: Prisma.ExerciseSessionFindUniqueArgs
  ): Promise<PrismaExerciseSession | null> {
    return this.prisma.exerciseSession.findUnique(args);
  }
  async createExerciseSession(
    args: Prisma.ExerciseSessionCreateArgs
  ): Promise<PrismaExerciseSession> {
    return this.prisma.exerciseSession.create(args);
  }
  async updateExerciseSession(
    args: Prisma.ExerciseSessionUpdateArgs
  ): Promise<PrismaExerciseSession> {
    return this.prisma.exerciseSession.update(args);
  }
  async deleteExerciseSession(
    args: Prisma.ExerciseSessionDeleteArgs
  ): Promise<PrismaExerciseSession> {
    return this.prisma.exerciseSession.delete(args);
  }

  async findExerciseCounts(
    parentId: string,
    args: Prisma.ExerciseCountFindManyArgs
  ): Promise<PrismaExerciseCount[]> {
    return this.prisma.exerciseSession
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .exerciseCounts(args);
  }

  async getExercise(parentId: string): Promise<PrismaExercise | null> {
    return this.prisma.exerciseSession
      .findUnique({
        where: { id: parentId },
      })
      .exercise();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.exerciseSession
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { HomelessIndividual } from "./HomelessIndividual";
import { HomelessIndividualCountArgs } from "./HomelessIndividualCountArgs";
import { HomelessIndividualFindManyArgs } from "./HomelessIndividualFindManyArgs";
import { HomelessIndividualFindUniqueArgs } from "./HomelessIndividualFindUniqueArgs";
import { DeleteHomelessIndividualArgs } from "./DeleteHomelessIndividualArgs";
import { HomelessIndividualService } from "../homelessIndividual.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HomelessIndividual)
export class HomelessIndividualResolverBase {
  constructor(
    protected readonly service: HomelessIndividualService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HomelessIndividual",
    action: "read",
    possession: "any",
  })
  async _homelessIndividualsMeta(
    @graphql.Args() args: HomelessIndividualCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HomelessIndividual])
  @nestAccessControl.UseRoles({
    resource: "HomelessIndividual",
    action: "read",
    possession: "any",
  })
  async homelessIndividuals(
    @graphql.Args() args: HomelessIndividualFindManyArgs
  ): Promise<HomelessIndividual[]> {
    return this.service.homelessIndividuals(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HomelessIndividual, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HomelessIndividual",
    action: "read",
    possession: "own",
  })
  async homelessIndividual(
    @graphql.Args() args: HomelessIndividualFindUniqueArgs
  ): Promise<HomelessIndividual | null> {
    const result = await this.service.homelessIndividual(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => HomelessIndividual)
  @nestAccessControl.UseRoles({
    resource: "HomelessIndividual",
    action: "delete",
    possession: "any",
  })
  async deleteHomelessIndividual(
    @graphql.Args() args: DeleteHomelessIndividualArgs
  ): Promise<HomelessIndividual | null> {
    try {
      return await this.service.deleteHomelessIndividual(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

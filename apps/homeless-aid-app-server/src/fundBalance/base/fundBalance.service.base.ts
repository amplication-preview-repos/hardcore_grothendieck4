/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FundBalance as PrismaFundBalance } from "@prisma/client";

export class FundBalanceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FundBalanceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fundBalance.count(args);
  }

  async fundBalances(
    args: Prisma.FundBalanceFindManyArgs
  ): Promise<PrismaFundBalance[]> {
    return this.prisma.fundBalance.findMany(args);
  }
  async fundBalance(
    args: Prisma.FundBalanceFindUniqueArgs
  ): Promise<PrismaFundBalance | null> {
    return this.prisma.fundBalance.findUnique(args);
  }
  async createFundBalance(
    args: Prisma.FundBalanceCreateArgs
  ): Promise<PrismaFundBalance> {
    return this.prisma.fundBalance.create(args);
  }
  async updateFundBalance(
    args: Prisma.FundBalanceUpdateArgs
  ): Promise<PrismaFundBalance> {
    return this.prisma.fundBalance.update(args);
  }
  async deleteFundBalance(
    args: Prisma.FundBalanceDeleteArgs
  ): Promise<PrismaFundBalance> {
    return this.prisma.fundBalance.delete(args);
  }
}

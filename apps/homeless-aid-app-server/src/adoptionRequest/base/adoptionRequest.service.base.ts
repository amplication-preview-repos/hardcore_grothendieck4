/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AdoptionRequest as PrismaAdoptionRequest,
} from "@prisma/client";

export class AdoptionRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AdoptionRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.adoptionRequest.count(args);
  }

  async adoptionRequests(
    args: Prisma.AdoptionRequestFindManyArgs
  ): Promise<PrismaAdoptionRequest[]> {
    return this.prisma.adoptionRequest.findMany(args);
  }
  async adoptionRequest(
    args: Prisma.AdoptionRequestFindUniqueArgs
  ): Promise<PrismaAdoptionRequest | null> {
    return this.prisma.adoptionRequest.findUnique(args);
  }
  async createAdoptionRequest(
    args: Prisma.AdoptionRequestCreateArgs
  ): Promise<PrismaAdoptionRequest> {
    return this.prisma.adoptionRequest.create(args);
  }
  async updateAdoptionRequest(
    args: Prisma.AdoptionRequestUpdateArgs
  ): Promise<PrismaAdoptionRequest> {
    return this.prisma.adoptionRequest.update(args);
  }
  async deleteAdoptionRequest(
    args: Prisma.AdoptionRequestDeleteArgs
  ): Promise<PrismaAdoptionRequest> {
    return this.prisma.adoptionRequest.delete(args);
  }
}
